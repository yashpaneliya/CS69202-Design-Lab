
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE DOUBLE_EQUALS EQUALS FLOAT ID INT LPAREN MINUS MOD PLUS POSTFIX POWER PREFIX RPAREN TIMESassign : ID EQUALS expressionassign : expressionexpression : expression DOUBLE_EQUALS expressionexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : factor POWER factorfactor : factor MOD factorfactor : MINUS factorfactor : IDfactor : INTfactor : FLOATfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'ID':([0,5,9,10,11,12,13,14,15,18,19,],[2,17,17,17,17,17,17,17,17,17,17,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,],[5,-13,13,-6,5,-9,-14,-15,5,5,5,5,5,5,5,-12,-13,5,5,13,13,13,-4,-5,-7,-8,-10,-11,-16,]),'INT':([0,5,9,10,11,12,13,14,15,18,19,],[7,7,7,7,7,7,7,7,7,7,7,]),'FLOAT':([0,5,9,10,11,12,13,14,15,18,19,],[8,8,8,8,8,8,8,8,8,8,8,]),'LPAREN':([0,5,9,10,11,12,13,14,15,18,19,],[9,9,9,9,9,9,9,9,9,9,9,]),'$end':([1,2,3,4,6,7,8,16,17,21,22,23,24,25,26,27,28,29,],[0,-13,-2,-6,-9,-14,-15,-12,-13,-1,-3,-4,-5,-7,-8,-10,-11,-16,]),'EQUALS':([2,],[10,]),'POWER':([2,6,7,8,16,17,25,26,27,28,29,],[-13,18,-14,-15,18,-13,18,18,18,18,-16,]),'MOD':([2,6,7,8,16,17,25,26,27,28,29,],[-13,19,-14,-15,19,-13,19,19,19,19,-16,]),'TIMES':([2,4,6,7,8,16,17,23,24,25,26,27,28,29,],[-13,14,-9,-14,-15,-12,-13,14,14,-7,-8,-10,-11,-16,]),'DIVIDE':([2,4,6,7,8,16,17,23,24,25,26,27,28,29,],[-13,15,-9,-14,-15,-12,-13,15,15,-7,-8,-10,-11,-16,]),'DOUBLE_EQUALS':([2,3,4,6,7,8,16,17,20,21,22,23,24,25,26,27,28,29,],[-13,11,-6,-9,-14,-15,-12,-13,11,11,11,-4,-5,-7,-8,-10,-11,-16,]),'PLUS':([2,3,4,6,7,8,16,17,20,21,22,23,24,25,26,27,28,29,],[-13,12,-6,-9,-14,-15,-12,-13,12,12,12,-4,-5,-7,-8,-10,-11,-16,]),'RPAREN':([4,6,7,8,16,17,20,22,23,24,25,26,27,28,29,],[-6,-9,-14,-15,-12,-13,29,-3,-4,-5,-7,-8,-10,-11,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assign':([0,],[1,]),'expression':([0,9,10,11,],[3,20,21,22,]),'term':([0,9,10,11,12,13,],[4,4,4,4,23,24,]),'factor':([0,5,9,10,11,12,13,14,15,18,19,],[6,16,6,6,6,6,6,25,26,27,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> assign","S'",1,None,None,None),
  ('assign -> ID EQUALS expression','assign',3,'p_assign','yacc2.py',10),
  ('assign -> expression','assign',1,'p_expression','yacc2.py',15),
  ('expression -> expression DOUBLE_EQUALS expression','expression',3,'p_double_equals','yacc2.py',20),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','yacc2.py',28),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','yacc2.py',35),
  ('expression -> term','expression',1,'p_expression_term','yacc2.py',42),
  ('term -> term TIMES factor','term',3,'p_term_times','yacc2.py',54),
  ('term -> term DIVIDE factor','term',3,'p_term_divide','yacc2.py',61),
  ('term -> factor','term',1,'p_term_factor','yacc2.py',71),
  ('factor -> factor POWER factor','factor',3,'p_factor_power','yacc2.py',76),
  ('factor -> factor MOD factor','factor',3,'p_factor_mod','yacc2.py',83),
  ('factor -> MINUS factor','factor',2,'p_factor_unary','yacc2.py',90),
  ('factor -> ID','factor',1,'p_factor_id','yacc2.py',97),
  ('factor -> INT','factor',1,'p_factor_number','yacc2.py',104),
  ('factor -> FLOAT','factor',1,'p_factor_float','yacc2.py',110),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','yacc2.py',117),
]
